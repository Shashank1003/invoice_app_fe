// Generated by ts-to-zod
import { z } from "zod";
import { itemSchema } from "./itemFormSchema";

export const invoiceBriefSchema = z.object({
    id: z.string(),
    due_date: z.string(),
    status: z.string(),
    total: z.number(),
    client_name: z.string(),
});

const zDateString = z
    .string()
    .regex(/^\d{4}-\d{2}-\d{2}$/, "Must be in YYYY-MM-DD format")
    .refine(
        str => {
            const date = new Date(str);
            return !isNaN(date.getTime()) && date.toISOString().startsWith(str);
        },
        {
            message: "Invalid calendar date",
        }
    );

export const invoiceDetailedSchema = z.object({
    id: z.string().uuid().optional(),
    due_date: zDateString.optional(),
    client_name: z.string().min(1, "Client name is required!"),
    client_email: z.string().email("Invalid email!"),
    street_from: z.string().min(1, "Street is required!"),
    street_to: z.string().min(1, "Street is required!"),
    city_from: z.string().min(1, "City is required!"),
    city_to: z.string().min(1, "City is required!"),
    postcode_from: z.string().min(1, "Postcode is required!"),
    postcode_to: z.string().min(1, "Postcode is required!"),
    country_from: z.string().min(1, "Country is required!"),
    country_to: z.string().min(1, "Country is required!"),
    invoice_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Invalid date!"),
    status: z.enum(["DRAFT", "PENDING", "PAID"]),
    payment_terms: z.enum(["ONE", "SEVEN", "FOURTEEN", "THIRTY"]),
    description: z.string().min(1, "Description is required!"),
    total: z.number(),
    items: z.array(itemSchema).min(1, "At least one item is required!"),
});
